from __future__ import annotations

import asyncio
import logging
import os
import random
import time

from telegram import Update
from telegram.error import RetryAfter, TelegramError
from telegram.ext import (
    Application,
    ApplicationBuilder,
    ChatMemberHandler,
    CommandHandler,
    ContextTypes,
)

from .config import Settings
from .database import CasinoDatabase, User
from .env import load_dotenv
from .slots import FruitMachine, PharaohMachine, SlotMachine


logger = logging.getLogger(__name__)


async def with_db(op, *args, **kwargs):
    return await asyncio.to_thread(op, *args, **kwargs)


def format_username(user: User | None, fallback: str | None = None) -> str:
    if user and user.username:
        return f"@{user.username}" if not user.username.startswith("@") else user.username
    if fallback:
        return fallback
    return "–ò–≥—Ä–æ–∫"


def format_timespan(seconds: int) -> str:
    parts: list[str] = []
    hours, remainder = divmod(seconds, 3600)
    minutes, secs = divmod(remainder, 60)
    if hours:
        parts.append(f"{hours} —á.")
    if minutes:
        parts.append(f"{minutes} –º–∏–Ω.")
    if secs or not parts:
        parts.append(f"{secs} —Å–µ–∫.")
    return " ".join(parts)


class CasinoBot:
    def __init__(self, db: CasinoDatabase, settings: Settings) -> None:
        self.db = db
        self.settings = settings
        self._slot_lock = asyncio.Lock()
        self._rng = random.Random()
        self._slot_machines: dict[str, SlotMachine] = {}
        self._default_slot_key = "fruit"
        self._configure_machines()

    def register(self, application: Application) -> None:
        application.add_handler(CommandHandler("start_casino", self.start_casino))
        application.add_handler(CommandHandler("balance", self.balance))
        application.add_handler(CommandHandler(["top", "leaderboard"], self.leaderboard))
        application.add_handler(CommandHandler("daily", self.daily))
        application.add_handler(CommandHandler("give", self.give))
        application.add_handler(CommandHandler(["slots", "s"], self.slots))
        application.add_handler(ChatMemberHandler(self.welcome_new_chat, ChatMemberHandler.MY_CHAT_MEMBER))

    async def _sync_username(self, telegram_user, record: User | None) -> None:
        if not telegram_user or not record or not telegram_user.username:
            return
        if telegram_user.username != record.username:
            await with_db(self.db.update_username, telegram_user.id, telegram_user.username)

    async def start_casino(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        tg_user = update.effective_user
        if tg_user is None or update.effective_chat is None or update.message is None:
            return

        existing = await with_db(self.db.get_user, tg_user.id)
        if existing:
            await self._sync_username(tg_user, existing)
            await update.message.reply_text(
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à –±–∞–ª–∞–Ω—Å: {existing.balance} —Ñ–∏—à–µ–∫."
            )
            return

        await with_db(self.db.create_user, tg_user.id, tg_user.username, self.settings.starting_balance)
        await update.message.reply_text(
            (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ! "
                f"–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {self.settings.starting_balance} —Ñ–∏—à–µ–∫. –£–¥–∞—á–∏!"
            )
        )

    async def balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        tg_user = update.effective_user
        if tg_user is None or update.effective_chat is None or update.message is None:
            return

        user = await with_db(self.db.get_user, tg_user.id)
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_casino.")
            return
        await self._sync_username(tg_user, user)

        display_name = format_username(user, tg_user.full_name)
        await update.message.reply_text(f"üë§ {display_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: üí∞ {user.balance} —Ñ–∏—à–µ–∫.")

    async def daily(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        tg_user = update.effective_user
        if tg_user is None or update.effective_chat is None or update.message is None:
            return

        user = await with_db(self.db.get_user, tg_user.id)
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_casino.")
            return
        await self._sync_username(tg_user, user)

        now = int(time.time())
        if user.last_daily_timestamp is not None:
            elapsed = now - user.last_daily_timestamp
            if elapsed < self.settings.daily_cooldown_seconds:
                remaining = self.settings.daily_cooldown_seconds - elapsed
                await update.message.reply_text(
                    f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {format_timespan(remaining)}."
                )
                return

        new_balance = await with_db(self.db.adjust_balance, tg_user.id, self.settings.daily_bonus)
        await with_db(self.db.set_daily_timestamp, tg_user.id, now)
        await update.message.reply_text(
            (
                f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ {self.settings.daily_bonus} —Ñ–∏—à–µ–∫! "
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
            )
        )

    async def leaderboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if update.effective_user is None or update.effective_chat is None or update.message is None:
            return

        top_users = await with_db(self.db.top_users, self.settings.leaderboard_limit)
        if not top_users:
            await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º! üéØ")
            return

        lines = ["üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–∞—à–µ–≥–æ –∫–∞–∑–∏–Ω–æ:\n"]
        for idx, user in enumerate(top_users, start=1):
            name = format_username(user, fallback=f"–ò–≥—Ä–æ–∫ {user.telegram_id}")
            medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(idx)
            prefix = f"{medal} " if medal else f"{idx}. "
            lines.append(f"{prefix}{name} - {user.balance} —Ñ–∏—à–µ–∫")
        await update.message.reply_text("\n".join(lines))

    async def give(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = update.message
        tg_user = update.effective_user
        if message is None or tg_user is None:
            return

        if len(context.args) < 2:
            await message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /give <—Å—É–º–º–∞> @username")
            return

        amount_arg = context.args[0]
        recipient_arg = context.args[1]

        try:
            amount = int(amount_arg)
        except ValueError:
            await message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        if amount <= 0:
            await message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        if not recipient_arg.startswith("@"):
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç @username.")
            return

        recipient_username = recipient_arg.removeprefix("@")

        sender = await with_db(self.db.get_user, tg_user.id)
        if not sender:
            await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_casino.")
            return
        await self._sync_username(tg_user, sender)

        recipient = await with_db(self.db.get_user_by_username, recipient_username)
        if not recipient:
            await message.reply_text("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        if recipient.telegram_id == sender.telegram_id:
            await message.reply_text("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ñ–∏—à–∫–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return

        try:
            sender_balance, _ = await with_db(
                self.db.transfer, sender.telegram_id, recipient.telegram_id, amount
            )
        except ValueError as exc:
            await message.reply_text(str(exc))
            return

        sender_name = format_username(sender, fallback=tg_user.full_name)
        recipient_name = format_username(recipient)

        await message.reply_text(
            (
                f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! {sender_name} –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫—É {recipient_name}.\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {sender_balance} —Ñ–∏—à–µ–∫."
            )
        )

    async def slots(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = update.message
        tg_user = update.effective_user
        if message is None or tg_user is None:
            return

        args = list(context.args)
        if args and args[0].lower() in {"help", "?"}:
            await self._safe_reply(message, self._build_slots_help(), reply=False)
            return

        try:
            machine_key, bet_arg = self._parse_slot_arguments(args)
        except ValueError:
            help_text = self._build_slots_help()
            await self._safe_reply(
                message,
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/slots help` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.\n\n" + help_text,
                reply=False,
            )
            return
        async with self._slot_lock:
            machine = self._slot_machines.get(machine_key, self._slot_machines[self._default_slot_key])

            user = await with_db(self.db.get_user, tg_user.id)
            if not user:
                await self._safe_reply(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_casino.")
                return
            if user.balance <= 0:
                await self._safe_reply(message, "–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ—Ç —Ñ–∏—à–µ–∫. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥–æ–π /daily –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º.")
                return
            await self._sync_username(tg_user, user)

            bet = self._resolve_bet(user.balance, bet_arg)
            if bet is None:
                await self._safe_reply(message, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return

            try:
                balance_after_bet = await with_db(self.db.adjust_balance, tg_user.id, -bet)
            except ValueError:
                await self._safe_reply(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
                return

            spin_message = await self._safe_reply(message, f"üé∞ {machine.title}: –≤—Ä–∞—â–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã...", reply=False)
            frame_delay = 0.9
            if spin_message:
                for _ in range(3):
                    await asyncio.sleep(frame_delay)
                    temp_symbols = [self._rng.choice(machine.reel) for _ in range(3)]
                    if not await self._safe_edit(spin_message, f"[ {' | '.join(temp_symbols)} ]"):
                        spin_message = None
                        break
            else:
                await asyncio.sleep(frame_delay * 3)

            outcome = machine.spin(bet, self._rng)
            if outcome.winnings:
                new_balance = await with_db(self.db.adjust_balance, tg_user.id, outcome.winnings)
            else:
                new_balance = balance_after_bet

            final_text = f"{outcome.message}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
            if spin_message and await self._safe_edit(spin_message, final_text):
                return
            await self._safe_reply(message, final_text)

    async def welcome_new_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        chat_member = update.my_chat_member
        if chat_member is None:
            return
        new_status = chat_member.new_chat_member
        old_status = chat_member.old_chat_member
        if not new_status or new_status.user.id != context.bot.id:
            return
        chat = chat_member.chat
        if chat.type not in {"group", "supergroup"}:
            return
        if old_status and old_status.status not in {"left", "kicked"}:
            return
        commands = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–∫–∞–∑–∏–Ω–æ! ü§ñ\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start_casino ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å\n"
            "‚Ä¢ /balance ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "‚Ä¢ /daily ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
            "‚Ä¢ /slots <—Å—Ç–∞–≤–∫–∞> ‚Äî —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã\n"
            "‚Ä¢ /give <—Å—É–º–º–∞> @username ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–∏—à–∫–∏\n"
            "‚Ä¢ /top ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"
        )
        await context.bot.send_message(chat.id, commands)

    def _configure_machines(self) -> None:
        fruit = FruitMachine(self.settings.slot_reel, self.settings.special_payouts)
        pharaoh = PharaohMachine()
        self._slot_machines = {
            fruit.key: fruit,
            pharaoh.key: pharaoh,
        }
        self._default_slot_key = fruit.key

    def _parse_slot_arguments(self, args: list[str]) -> tuple[str, str | None]:
        machine_key = self._default_slot_key
        bet_arg: str | None = None
        if not args:
            return machine_key, None

        first = args[0].lower()
        if first in self._slot_machines:
            machine_key = first
            if len(args) > 1:
                bet_arg = args[1]
        else:
            bet_arg = args[0]
            if bet_arg:
                try:
                    int(bet_arg)
                except ValueError as exc:
                    raise ValueError(first) from exc
        return machine_key, bet_arg

    def _resolve_bet(self, balance: int, bet_arg: str | None) -> int | None:
        if bet_arg is not None:
            try:
                bet = int(bet_arg)
            except ValueError:
                return None
            return bet if bet > 0 else None

        auto_bet = int(balance * 0.05)
        bet = max(1, min(1000, auto_bet if auto_bet > 0 else 1))
        return bet if bet > 0 else None

    def _build_slots_help(self) -> str:
        lines = ["üé∞ –ó–∞–ª –∏–≥—Ä–æ–≤—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤:", ""]
        for machine in self._slot_machines.values():
            lines.append(
                f"‚Ä¢ {machine.title} (`/slots {machine.key}`) ‚Äî {machine.description}"
            )
        lines.append("")
        lines.append(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/slots <–∞–≤—Ç–æ–º–∞—Ç> <—Å—Ç–∞–≤–∫–∞>` –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ `/s <–∞–≤—Ç–æ–º–∞—Ç> <—Å—Ç–∞–≤–∫–∞>`."
        )
        lines.append(
            "–ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –§—Ä—É–∫—Ç–æ–≤—ã–π –ö–æ–∫—Ç–µ–π–ª—å. –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (–º–∏–Ω. 1, –º–∞–∫—Å. 1000)."
        )
        return "\n".join(lines)

    async def _safe_reply(self, message, text: str, *, reply: bool = True):
        for attempt in range(3):
            try:
                return await message.reply_text(text, quote=reply)
            except RetryAfter as exc:
                await asyncio.sleep(exc.retry_after + 0.1)
            except TelegramError as exc:
                logger.debug("Failed to send reply: %s", exc)
                break
        return None

    async def _safe_edit(self, message, text: str) -> bool:
        for attempt in range(3):
            try:
                await message.edit_text(text)
                return True
            except RetryAfter as exc:
                await asyncio.sleep(exc.retry_after + 0.1)
            except TelegramError as exc:
                logger.debug("Failed to edit message: %s", exc)
                break
        return False


def build_application(
    token: str,
    db_path: str | None = None,
    settings: Settings | None = None,
) -> Application:
    db_location = db_path or os.environ.get("CASINO_DB_PATH", "casino.sqlite3")
    db = CasinoDatabase(db_location)
    config = settings or Settings.from_env()

    application = ApplicationBuilder().token(token).build()
    CasinoBot(db, config).register(application)
    return application


def main() -> None:
    load_dotenv()
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN environment variable is required")
    app = build_application(token)
    app.run_polling()


__all__ = ["build_application", "main", "CasinoBot"]
