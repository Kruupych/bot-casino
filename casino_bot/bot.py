from __future__ import annotations

import asyncio
import os
import random
import time
from typing import Sequence

from telegram import Update
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes

from .config import Settings
from .database import CasinoDatabase, User
from .env import load_dotenv


async def with_db(op, *args, **kwargs):
    return await asyncio.to_thread(op, *args, **kwargs)


def format_username(user: User | None, fallback: str | None = None) -> str:
    if user and user.username:
        return f"@{user.username}" if not user.username.startswith("@") else user.username
    if fallback:
        return fallback
    return "–ò–≥—Ä–æ–∫"


def format_timespan(seconds: int) -> str:
    parts: list[str] = []
    hours, remainder = divmod(seconds, 3600)
    minutes, secs = divmod(remainder, 60)
    if hours:
        parts.append(f"{hours} —á.")
    if minutes:
        parts.append(f"{minutes} –º–∏–Ω.")
    if secs or not parts:
        parts.append(f"{secs} —Å–µ–∫.")
    return " ".join(parts)


class CasinoBot:
    def __init__(self, db: CasinoDatabase, settings: Settings) -> None:
        self.db = db
        self.settings = settings

    def register(self, application: Application) -> None:
        application.add_handler(CommandHandler("start_casino", self.start_casino))
        application.add_handler(CommandHandler("balance", self.balance))
        application.add_handler(CommandHandler(["top", "leaderboard"], self.leaderboard))
        application.add_handler(CommandHandler("daily", self.daily))
        application.add_handler(CommandHandler("give", self.give))
        application.add_handler(CommandHandler("slots", self.slots))

    async def _sync_username(self, telegram_user, record: User | None) -> None:
        if not telegram_user or not record or not telegram_user.username:
            return
        if telegram_user.username != record.username:
            await with_db(self.db.update_username, telegram_user.id, telegram_user.username)

    async def start_casino(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        tg_user = update.effective_user
        if tg_user is None or update.effective_chat is None or update.message is None:
            return

        existing = await with_db(self.db.get_user, tg_user.id)
        if existing:
            await self._sync_username(tg_user, existing)
            await update.message.reply_text(
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à –±–∞–ª–∞–Ω—Å: {existing.balance} —Ñ–∏—à–µ–∫."
            )
            return

        await with_db(self.db.create_user, tg_user.id, tg_user.username, self.settings.starting_balance)
        await update.message.reply_text(
            (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ! "
                f"–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {self.settings.starting_balance} —Ñ–∏—à–µ–∫. –£–¥–∞—á–∏!"
            )
        )

    async def balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        tg_user = update.effective_user
        if tg_user is None or update.effective_chat is None or update.message is None:
            return

        user = await with_db(self.db.get_user, tg_user.id)
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_casino.")
            return
        await self._sync_username(tg_user, user)

        display_name = format_username(user, tg_user.full_name)
        await update.message.reply_text(f"üë§ {display_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: üí∞ {user.balance} —Ñ–∏—à–µ–∫.")

    async def daily(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        tg_user = update.effective_user
        if tg_user is None or update.effective_chat is None or update.message is None:
            return

        user = await with_db(self.db.get_user, tg_user.id)
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_casino.")
            return
        await self._sync_username(tg_user, user)

        now = int(time.time())
        if user.last_daily_timestamp is not None:
            elapsed = now - user.last_daily_timestamp
            if elapsed < self.settings.daily_cooldown_seconds:
                remaining = self.settings.daily_cooldown_seconds - elapsed
                await update.message.reply_text(
                    f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {format_timespan(remaining)}."
                )
                return

        new_balance = await with_db(self.db.adjust_balance, tg_user.id, self.settings.daily_bonus)
        await with_db(self.db.set_daily_timestamp, tg_user.id, now)
        await update.message.reply_text(
            (
                f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ {self.settings.daily_bonus} —Ñ–∏—à–µ–∫! "
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
            )
        )

    async def leaderboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if update.effective_user is None or update.effective_chat is None or update.message is None:
            return

        top_users = await with_db(self.db.top_users, self.settings.leaderboard_limit)
        if not top_users:
            await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º! üéØ")
            return

        lines = ["üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–∞—à–µ–≥–æ –∫–∞–∑–∏–Ω–æ:\n"]
        for idx, user in enumerate(top_users, start=1):
            name = format_username(user, fallback=f"–ò–≥—Ä–æ–∫ {user.telegram_id}")
            medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(idx)
            prefix = f"{medal} " if medal else f"{idx}. "
            lines.append(f"{prefix}{name} - {user.balance} —Ñ–∏—à–µ–∫")
        await update.message.reply_text("\n".join(lines))

    async def give(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = update.message
        tg_user = update.effective_user
        if message is None or tg_user is None:
            return

        if len(context.args) < 2:
            await message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /give <—Å—É–º–º–∞> @username")
            return

        amount_arg = context.args[0]
        recipient_arg = context.args[1]

        try:
            amount = int(amount_arg)
        except ValueError:
            await message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        if amount <= 0:
            await message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        if not recipient_arg.startswith("@"):
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç @username.")
            return

        recipient_username = recipient_arg.removeprefix("@")

        sender = await with_db(self.db.get_user, tg_user.id)
        if not sender:
            await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_casino.")
            return
        await self._sync_username(tg_user, sender)

        recipient = await with_db(self.db.get_user_by_username, recipient_username)
        if not recipient:
            await message.reply_text("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        if recipient.telegram_id == sender.telegram_id:
            await message.reply_text("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ñ–∏—à–∫–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return

        try:
            sender_balance, _ = await with_db(
                self.db.transfer, sender.telegram_id, recipient.telegram_id, amount
            )
        except ValueError as exc:
            await message.reply_text(str(exc))
            return

        sender_name = format_username(sender, fallback=tg_user.full_name)
        recipient_name = format_username(recipient)

        await message.reply_text(
            (
                f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! {sender_name} –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫—É {recipient_name}.\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {sender_balance} —Ñ–∏—à–µ–∫."
            )
        )

    async def slots(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        message = update.message
        tg_user = update.effective_user
        if message is None or tg_user is None:
            return

        if not context.args:
            await message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /slots <—Å—Ç–∞–≤–∫–∞>")
            return

        try:
            bet = int(context.args[0])
        except ValueError:
            await message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        if bet <= 0:
            await message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        user = await with_db(self.db.get_user, tg_user.id)
        if not user:
            await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_casino.")
            return
        await self._sync_username(tg_user, user)

        try:
            balance_after_bet = await with_db(self.db.adjust_balance, tg_user.id, -bet)
        except ValueError:
            await message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
            return

        spin_message = await message.reply_text("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω...")
        await asyncio.sleep(0.8)

        final_symbols = [random.choice(self.settings.slot_reel) for _ in range(3)]
        for _ in range(2):
            temp_symbols = [random.choice(self.settings.slot_reel) for _ in range(3)]
            await spin_message.edit_text(f"[ {' | '.join(temp_symbols)} ]")
            await asyncio.sleep(0.5)

        await spin_message.edit_text(f"[ {' | '.join(final_symbols)} ]")

        multiplier = self._payout_multiplier(tuple(final_symbols))
        winnings = bet * multiplier
        if winnings:
            new_balance = await with_db(self.db.adjust_balance, tg_user.id, winnings)
        else:
            new_balance = balance_after_bet

        result_text = self._build_slots_result_text(final_symbols, winnings, new_balance)
        await message.reply_text(result_text)

    def _payout_multiplier(self, symbols: tuple[str, str, str]) -> int:
        special = self.settings.special_payouts.get(symbols)
        if special is not None:
            return special
        if symbols.count(symbols[0]) == 3:
            return 5
        if len({symbols[0], symbols[1], symbols[2]}) == 2:
            return 2
        return 0

    def _build_slots_result_text(self, symbols: Sequence[str], winnings: int, new_balance: int) -> str:
        header = f"[ {' | '.join(symbols)} ]"
        if winnings == 0:
            return f"{header}\n–£–≤—ã, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
        if tuple(symbols) == ("üíé", "üíé", "üíé"):
            return (
                f"{header}\nüí• –î–ñ–ï–ö–ü–û–¢! üí• –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} —Ñ–∏—à–µ–∫! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
            )
        if tuple(symbols) == ("üçÄ", "üçÄ", "üçÄ"):
            return (
                f"{header}\n–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –¢—Ä–∏ –∫–ª–µ–≤–µ—Ä–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç {winnings} —Ñ–∏—à–µ–∫. –ë–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
            )
        if tuple(symbols) == ("üîî", "üîî", "üîî"):
            return (
                f"{header}\nüîî –ó–≤–æ–Ω –º–æ–Ω–µ—Ç! üîî –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} —Ñ–∏—à–µ–∫. –ë–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
            )
        if len(set(symbols)) == 1:
            return f"{header}\n–¢—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} —Ñ–∏—à–µ–∫. –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
        if len(set(symbols)) == 2:
            return f"{header}\n–î–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} —Ñ–∏—à–µ–∫. –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."
        return f"{header}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} —Ñ–∏—à–µ–∫. –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} —Ñ–∏—à–µ–∫."


def build_application(token: str, db_path: str | None = None, settings: Settings | None = None) -> Application:
    db_location = db_path or os.environ.get("CASINO_DB_PATH", "casino.sqlite3")
    db = CasinoDatabase(db_location)
    config = settings or Settings.from_env()

    application = ApplicationBuilder().token(token).build()
    CasinoBot(db, config).register(application)
    return application


def main() -> None:
    load_dotenv()
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN environment variable is required")
    app = build_application(token)
    app.run_polling()


__all__ = ["build_application", "main", "CasinoBot"]
